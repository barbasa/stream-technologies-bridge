akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "INFO"
  version = "2.6.16"
}

akka.kafka.consumer {
  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    security.protocol = SSL
  }
}

akka.kafka.producer {
  use-dispatcher = "akka.kafka.default-dispatcher"

  kafka-clients {
    security.protocol = SSL
  }
}

com.contxt.kinesis {
  # Optional Kinesis consumer parameters go in this section
  consumer {
  }
}

bridge {
  common {
    topics = [ "GERRIT.EVENT.CACHE","GERRIT.EVENT.STREAM","GERRIT.EVENT.INDEX", "GERRIT.EVENT.BATCH.INDEX", "GERRIT.EVENT.PROJECT.LIST","gerrit_web_session", "gerrit" ]
    topics = ${?BRIDGE_COMMON_TOPICS}
    forwardableInstanceIds = ${?BRIDGE_COMMON_FORWARDABLE_INSTACE_IDS}
  }
  kafka {
    groupId = "KafkaBrokerBridgeConsumer"
    groupId = ${?BRIDGE_KAFKA_GROUPID}
    bootstrapServers = "http://localhost:9092"
    bootstrapServers = ${?BRIDGE_KAFKA_BOOTSTRAPSERVERS}
  }
  kinesis {
    endpoint = ""
    endpoint = ${?BRIDGE_KINESIS_ENDPOINT}
    appName = "KinesisBrokerBridgeConsumer"
    appName = ${?BRIDGE_KINESIS_APPNAME}
  }
}